digraph "" {
AggregatorInterface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AggregatorInterface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    latestAnswer()</TD></TR><TR><TD align="left">    latestTimestamp()</TD></TR><TR><TD align="left">    latestRound()</TD></TR><TR><TD align="left">    getAnswer(uint256)</TD></TR><TR><TD align="left">    getTimestamp(uint256)</TD></TR></TABLE> >];

AggregatorV2V3Interface -> AggregatorInterface [ label="1" ];
AggregatorV2V3Interface -> AggregatorV3Interface [ label="2" ];
AggregatorV2V3Interface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AggregatorV2V3Interface</B></TD></TR></TABLE> >];

AggregatorV3Interface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AggregatorV3Interface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    description()</TD></TR><TR><TD align="left">    version()</TD></TR><TR><TD align="left">    getRoundData(uint80)</TD></TR><TR><TD align="left">    latestRoundData()</TD></TR></TABLE> >];

AccessControl -> Context [ label="1" ];
AccessControl -> IAccessControl [ label="2" ];
AccessControl -> ERC165 [ label="3" ];
AccessControl[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AccessControl</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    hasRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getRoleAdmin(bytes32)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    grantRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    revokeRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    renounceRole(bytes32,address)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkRole(bytes32)</TD></TR><TR><TD align="left">    _checkRole(bytes32,address)</TD></TR><TR><TD align="left">    _setupRole(bytes32,address)</TD></TR><TR><TD align="left">    _setRoleAdmin(bytes32,bytes32)</TD></TR><TR><TD align="left">    _grantRole(bytes32,address)</TD></TR><TR><TD align="left">    _revokeRole(bytes32,address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyRole(bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    DEFAULT_ADMIN_ROLE</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _roles</TD></TR></TABLE> >];

IAccessControl[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IAccessControl</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    hasRole(bytes32,address)</TD></TR><TR><TD align="left">    getRoleAdmin(bytes32)</TD></TR><TR><TD align="left">    grantRole(bytes32,address)</TD></TR><TR><TD align="left">    revokeRole(bytes32,address)</TD></TR><TR><TD align="left">    renounceRole(bytes32,address)</TD></TR></TABLE> >];

Ownable -> Context;
Ownable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Ownable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkOwner()</TD></TR><TR><TD align="left">    _transferOwnership(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _owner</TD></TR></TABLE> >];

IERC3156FlashBorrower[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC3156FlashBorrower</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    onFlashLoan(address,address,uint256,uint256,bytes)</TD></TR></TABLE> >];

IERC3156FlashLender[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC3156FlashLender</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    maxFlashLoan(address)</TD></TR><TR><TD align="left">    flashFee(address,uint256)</TD></TR><TR><TD align="left">    flashLoan(IERC3156FlashBorrower,address,uint256,bytes)</TD></TR></TABLE> >];

Pausable -> Context;
Pausable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Pausable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    paused()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _requireNotPaused()</TD></TR><TR><TD align="left">    _requirePaused()</TD></TR><TR><TD align="left">    _pause()</TD></TR><TR><TD align="left">    _unpause()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    whenNotPaused()</TD></TR><TR><TD align="left">    whenPaused()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _paused</TD></TR></TABLE> >];

ERC20 -> Context [ label="1" ];
ERC20 -> IERC20 [ label="2" ];
ERC20 -> IERC20Metadata [ label="3" ];
ERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    name()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    symbol()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    decimals()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transfer(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    allowance(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left">    increaseAllowance(address,uint256)</TD></TR><TR><TD align="left">    decreaseAllowance(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256)</TD></TR><TR><TD align="left">    _spendAllowance(address,address,uint256)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left">    _afterTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _allowances</TD></TR><TR><TD align="left">    _totalSupply</TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR></TABLE> >];

IERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

ERC20Burnable -> Context [ label="1" ];
ERC20Burnable -> ERC20 [ label="2" ];
ERC20Burnable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20Burnable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    burn(uint256)</TD></TR><TR><TD align="left">    burnFrom(address,uint256)</TD></TR></TABLE> >];

ERC20FlashMint -> ERC20 [ label="1" ];
ERC20FlashMint -> IERC3156FlashLender [ label="2" ];
ERC20FlashMint[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20FlashMint</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    maxFlashLoan(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    flashFee(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    flashLoan(IERC3156FlashBorrower,address,uint256,bytes)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _flashFee(address,uint256)</TD></TR><TR><TD align="left">    _flashFeeReceiver()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _RETURN_VALUE</TD></TR></TABLE> >];

IERC20Metadata -> IERC20;
IERC20Metadata[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20Metadata</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR></TABLE> >];

ERC721 -> Context [ label="1" ];
ERC721 -> ERC165 [ label="2" ];
ERC721 -> IERC721 [ label="3" ];
ERC721 -> IERC721Metadata [ label="4" ];
ERC721[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC721</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    ownerOf(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    name()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    symbol()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    tokenURI(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getApproved(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    setApprovalForAll(address,bool)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    isApprovedForAll(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    safeTransferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    safeTransferFrom(address,address,uint256,bytes)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _baseURI()</TD></TR><TR><TD align="left">    _safeTransfer(address,address,uint256,bytes)</TD></TR><TR><TD align="left">    _ownerOf(uint256)</TD></TR><TR><TD align="left">    _exists(uint256)</TD></TR><TR><TD align="left">    _isApprovedOrOwner(address,uint256)</TD></TR><TR><TD align="left">    _safeMint(address,uint256)</TD></TR><TR><TD align="left">    _safeMint(address,uint256,bytes)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(uint256)</TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _approve(address,uint256)</TD></TR><TR><TD align="left">    _setApprovalForAll(address,address,bool)</TD></TR><TR><TD align="left">    _requireMinted(uint256)</TD></TR><TR><TD align="left">    _checkOnERC721Received(address,address,uint256,bytes)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256,uint256)</TD></TR><TR><TD align="left">    _afterTokenTransfer(address,address,uint256,uint256)</TD></TR><TR><TD align="left">    __unsafe_increaseBalance(address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR><TR><TD align="left">    _owners</TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _tokenApprovals</TD></TR><TR><TD align="left">    _operatorApprovals</TD></TR></TABLE> >];

IERC721 -> IERC165;
IERC721[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    ownerOf(uint256)</TD></TR><TR><TD align="left">    safeTransferFrom(address,address,uint256,bytes)</TD></TR><TR><TD align="left">    safeTransferFrom(address,address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    setApprovalForAll(address,bool)</TD></TR><TR><TD align="left">    getApproved(uint256)</TD></TR><TR><TD align="left">    isApprovedForAll(address,address)</TD></TR></TABLE> >];

IERC721Receiver[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721Receiver</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    onERC721Received(address,address,uint256,bytes)</TD></TR></TABLE> >];

ERC721Burnable -> Context [ label="1" ];
ERC721Burnable -> ERC721 [ label="2" ];
ERC721Burnable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC721Burnable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    burn(uint256)</TD></TR></TABLE> >];

ERC721Enumerable -> ERC721 [ label="1" ];
ERC721Enumerable -> IERC721Enumerable [ label="2" ];
ERC721Enumerable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC721Enumerable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    tokenOfOwnerByIndex(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    tokenByIndex(uint256)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    _beforeTokenTransfer(address,address,uint256,uint256)</font></TD></TR><TR><TD align="left">    _addTokenToOwnerEnumeration(address,uint256)</TD></TR><TR><TD align="left">    _addTokenToAllTokensEnumeration(uint256)</TD></TR><TR><TD align="left">    _removeTokenFromOwnerEnumeration(address,uint256)</TD></TR><TR><TD align="left">    _removeTokenFromAllTokensEnumeration(uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _ownedTokens</TD></TR><TR><TD align="left">    _ownedTokensIndex</TD></TR><TR><TD align="left">    _allTokens</TD></TR><TR><TD align="left">    _allTokensIndex</TD></TR><TR><TD><BR/></TD></TR><TR><TD align="left" border="1"><font color="#777777" point-size="10">'balanceOf(address)' collides in inherited contracts IERC721, ERC721 where ERC721 is chosen.<BR/>'ownerOf(uint256)' collides in inherited contracts IERC721, ERC721 where ERC721 is chosen.<BR/>'safeTransferFrom(address,address,uint256,bytes)' collides in inherited contracts IERC721, ERC721 where ERC721 is chosen.<BR/>'safeTransferFrom(address,address,uint256)' collides in inherited contracts IERC721, ERC721 where ERC721 is chosen.<BR/>'transferFrom(address,address,uint256)' collides in inherited contracts IERC721, ERC721 where ERC721 is chosen.<BR/>'approve(address,uint256)' collides in inherited contracts IERC721, ERC721 where ERC721 is chosen.<BR/>'setApprovalForAll(address,bool)' collides in inherited contracts IERC721, ERC721 where ERC721 is chosen.<BR/>'getApproved(uint256)' collides in inherited contracts IERC721, ERC721 where ERC721 is chosen.<BR/>'isApprovedForAll(address,address)' collides in inherited contracts IERC721, ERC721 where ERC721 is chosen.</font></TD></TR></TABLE> >];

ERC721URIStorage -> ERC721;
ERC721URIStorage[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC721URIStorage</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    tokenURI(uint256)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _setTokenURI(uint256,string)</TD></TR><TR><TD align="left"><font color="#FFA500">    _burn(uint256)</font></TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _tokenURIs</TD></TR></TABLE> >];

IERC721Enumerable -> IERC721;
IERC721Enumerable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721Enumerable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    tokenOfOwnerByIndex(address,uint256)</TD></TR><TR><TD align="left">    tokenByIndex(uint256)</TD></TR></TABLE> >];

IERC721Metadata -> IERC721;
IERC721Metadata[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721Metadata</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    tokenURI(uint256)</TD></TR></TABLE> >];

Address[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Address</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isContract(address)</TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR><TR><TD align="left">    functionCall(address,bytes)</TD></TR><TR><TD align="left">    functionCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256,string)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResultFromTarget(address,bool,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResult(bool,bytes,string)</TD></TR><TR><TD align="left">    _revert(bytes,string)</TD></TR></TABLE> >];

Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

Counters[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Counters</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    current(Counters.Counter)</TD></TR><TR><TD align="left">    increment(Counters.Counter)</TD></TR><TR><TD align="left">    decrement(Counters.Counter)</TD></TR><TR><TD align="left">    reset(Counters.Counter)</TD></TR></TABLE> >];

Strings[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Strings</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    toString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256,uint256)</TD></TR><TR><TD align="left">    toHexString(address)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _SYMBOLS</TD></TR><TR><TD align="left">    _ADDRESS_LENGTH</TD></TR></TABLE> >];

ERC165 -> IERC165;
ERC165[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC165</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR></TABLE> >];

IERC165[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC165</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    supportsInterface(bytes4)</TD></TR></TABLE> >];

Math[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Math</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    max(uint256,uint256)</TD></TR><TR><TD align="left">    min(uint256,uint256)</TD></TR><TR><TD align="left">    average(uint256,uint256)</TD></TR><TR><TD align="left">    ceilDiv(uint256,uint256)</TD></TR><TR><TD align="left">    mulDiv(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    mulDiv(uint256,uint256,uint256,Math.Rounding)</TD></TR><TR><TD align="left">    sqrt(uint256)</TD></TR><TR><TD align="left">    sqrt(uint256,Math.Rounding)</TD></TR><TR><TD align="left">    log2(uint256)</TD></TR><TR><TD align="left">    log2(uint256,Math.Rounding)</TD></TR><TR><TD align="left">    log10(uint256)</TD></TR><TR><TD align="left">    log10(uint256,Math.Rounding)</TD></TR><TR><TD align="left">    log256(uint256)</TD></TR><TR><TD align="left">    log256(uint256,Math.Rounding)</TD></TR></TABLE> >];

SafeMath[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SafeMath</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    tryAdd(uint256,uint256)</TD></TR><TR><TD align="left">    trySub(uint256,uint256)</TD></TR><TR><TD align="left">    tryMul(uint256,uint256)</TD></TR><TR><TD align="left">    tryDiv(uint256,uint256)</TD></TR><TR><TD align="left">    tryMod(uint256,uint256)</TD></TR><TR><TD align="left">    add(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256)</TD></TR><TR><TD align="left">    mul(uint256,uint256)</TD></TR><TR><TD align="left">    div(uint256,uint256)</TD></TR><TR><TD align="left">    mod(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256,string)</TD></TR><TR><TD align="left">    div(uint256,uint256,string)</TD></TR><TR><TD align="left">    mod(uint256,uint256,string)</TD></TR></TABLE> >];

DLCLinkCompatible[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>DLCLinkCompatible</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    postCreateDLCHandler(bytes32)</TD></TR><TR><TD align="left">    setStatusFunded(bytes32)</TD></TR><TR><TD align="left">    postCloseDLCHandler(bytes32)</TD></TR><TR><TD align="left">    getBtcPriceCallback(bytes32,int256,uint256)</TD></TR><TR><TD align="left">    postMintBtcNft(bytes32,uint256)</TD></TR></TABLE> >];

DLCManager -> AccessControl;
DLCManager[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>DLCManager</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    getDLC(bytes32)</TD></TR><TR><TD align="left">    createDLC(uint256,uint256)</TD></TR><TR><TD align="left">    postCreateDLC(bytes32,uint256,uint256,address,address)</TD></TR><TR><TD align="left">    setStatusFunded(bytes32)</TD></TR><TR><TD align="left">    mintBtcNft(bytes32,uint256)</TD></TR><TR><TD align="left">    postMintBtcNft(bytes32,uint256)</TD></TR><TR><TD align="left">    closeDLC(bytes32,uint256)</TD></TR><TR><TD align="left">    postCloseDLC(bytes32,uint256)</TD></TR><TR><TD align="left">    getBTCPriceWithCallback(bytes32)</TD></TR><TR><TD align="left">    getAllUUIDs()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _generateUUID(address,uint256)</TD></TR><TR><TD align="left">    _getLatestPrice(address)</TD></TR><TR><TD align="left">    _removeClosedDLC(uint256)</TD></TR><TR><TD align="left">    _findIndex(bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    DLC_ADMIN_ROLE</TD></TR><TR><TD align="left">    openUUIDs</TD></TR><TR><TD align="left">    btcPriceFeedAddress</TD></TR><TR><TD align="left">    dlcs</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _localNonce</TD></TR></TABLE> >];

Migrations[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Migrations</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    setCompleted(uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    restricted()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    owner</TD></TR><TR><TD align="left">    lastCompletedMigration</TD></TR></TABLE> >];

LendingContract -> DLCLinkCompatible [ label="1" ];
LendingContract -> AccessControl [ label="2" ];
LendingContract[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>LendingContract</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    setupLoan(uint256,uint256,uint256,uint256)</TD></TR><TR><TD align="left"><font color="#FFA500">    postCreateDLCHandler(bytes32)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    setStatusFunded(bytes32)</font></TD></TR><TR><TD align="left">    borrow(uint256,uint256)</TD></TR><TR><TD align="left">    repay(uint256,uint256)</TD></TR><TR><TD align="left">    closeLoan(uint256)</TD></TR><TR><TD align="left"><font color="#FFA500">    postCloseDLCHandler(bytes32)</font></TD></TR><TR><TD align="left">    attemptLiquidate(uint256)</TD></TR><TR><TD align="left"><font color="#FFA500">    getBtcPriceCallback(bytes32,int256,uint256)</font></TD></TR><TR><TD align="left">    checkLiquidation(uint256,int256)</TD></TR><TR><TD align="left">    calculatePayoutRatio(uint256,int256)</TD></TR><TR><TD align="left">    getCollateralValue(uint256,int256)</TD></TR><TR><TD align="left">    getLoan(uint256)</TD></TR><TR><TD align="left">    getLoanByUUID(bytes32)</TD></TR><TR><TD align="left">    getAllLoansForAddress(address)</TD></TR><TR><TD align="left"><font color="#FFA500">    postMintBtcNft(bytes32,uint256)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _updateStatus(uint256,Status)</TD></TR><TR><TD align="left">    _liquidateLoan(uint256,uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyAdmin()</TD></TR><TR><TD align="left">    onlyDLCManager()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    ADMIN_ROLE</TD></TR><TR><TD align="left">    DLC_MANAGER_ROLE</TD></TR><TR><TD align="left">    index</TD></TR><TR><TD align="left">    loans</TD></TR><TR><TD align="left">    loanIDsByUUID</TD></TR><TR><TD align="left">    loansPerAddress</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _dlcManager<font color="blue" POINT-SIZE="10"> (DLCManager)</font></TD></TR><TR><TD align="left">    _usdc<font color="blue" POINT-SIZE="10"> (IERC20)</font></TD></TR></TABLE> >];

USDStableCoinForDLCs -> ERC20 [ label="1" ];
USDStableCoinForDLCs -> ERC20Burnable [ label="2" ];
USDStableCoinForDLCs -> Ownable [ label="3" ];
USDStableCoinForDLCs -> ERC20FlashMint [ label="4" ];
USDStableCoinForDLCs[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>USDStableCoinForDLCs</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    mint(address,uint256)</TD></TR></TABLE> >];

BtcNft -> ERC721 [ label="1" ];
BtcNft -> ERC721URIStorage [ label="2" ];
BtcNft -> ERC721Enumerable [ label="3" ];
BtcNft -> Pausable [ label="4" ];
BtcNft -> AccessControl [ label="5" ];
BtcNft -> ERC721Burnable [ label="6" ];
BtcNft[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>BtcNft</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    pause()</TD></TR><TR><TD align="left">    unpause()</TD></TR><TR><TD align="left">    safeMint(address,string,address,bytes32)</TD></TR><TR><TD align="left">    getNextMintId()</TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left">    getDLCNFTsByOwner(address)</TD></TR><TR><TD align="left"><font color="#FFA500">    tokenURI(uint256)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    _baseURI()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    _beforeTokenTransfer(address,address,uint256,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    _burn(uint256)</font></TD></TR><TR><TD align="left">    _setOriginalDepositor(uint256,address)</TD></TR><TR><TD align="left">    _setBroker(uint256,address)</TD></TR><TR><TD align="left">    _setDlcUUID(uint256,bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    PAUSER_ROLE</TD></TR><TR><TD align="left">    MINTER_ROLE</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _tokenIdCounter</TD></TR><TR><TD align="left">    _originalDepositors</TD></TR><TR><TD align="left">    _brokers</TD></TR><TR><TD align="left">    _dlcUUIDs</TD></TR></TABLE> >];

DLCBTC -> ERC20 [ label="1" ];
DLCBTC -> ERC20Burnable [ label="2" ];
DLCBTC -> Pausable [ label="3" ];
DLCBTC -> Ownable [ label="4" ];
DLCBTC[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>DLCBTC</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    decimals()</font></TD></TR><TR><TD align="left">    pause()</TD></TR><TR><TD align="left">    unpause()</TD></TR><TR><TD align="left">    mint(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    _beforeTokenTransfer(address,address,uint256)</font></TD></TR></TABLE> >];

DlcBroker -> DLCLinkCompatible [ label="1" ];
DlcBroker -> AccessControl [ label="2" ];
DlcBroker[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>DlcBroker</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    setupVault(uint256,uint256)</TD></TR><TR><TD align="left"><font color="#FFA500">    postCreateDLCHandler(bytes32)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    setStatusFunded(bytes32)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    postMintBtcNft(bytes32,uint256)</font></TD></TR><TR><TD align="left">    closeVault(uint256)</TD></TR><TR><TD align="left"><font color="#FFA500">    postCloseDLCHandler(bytes32)</font></TD></TR><TR><TD align="left">    getVault(uint256)</TD></TR><TR><TD align="left">    getVaultByUUID(bytes32)</TD></TR><TR><TD align="left">    getAllVaultsForAddress(address)</TD></TR><TR><TD align="left"><font color="#FFA500">    getBtcPriceCallback(bytes32,int256,uint256)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _updateStatus(uint256,Status)</TD></TR><TR><TD align="left">    mintBtcNft(bytes32,uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyAdmin()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    ADMIN_ROLE</TD></TR><TR><TD align="left">    index</TD></TR><TR><TD align="left">    vaults</TD></TR><TR><TD align="left">    vaultIDsByUUID</TD></TR><TR><TD align="left">    vaultsPerAddress</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _dlcManager<font color="blue" POINT-SIZE="10"> (DLCManager)</font></TD></TR><TR><TD align="left">    _btcNft<font color="blue" POINT-SIZE="10"> (BtcNft)</font></TD></TR><TR><TD align="left">    _dlcBTC<font color="blue" POINT-SIZE="10"> (DLCBTC)</font></TD></TR></TABLE> >];

MockBtcNft -> ERC721 [ label="1" ];
MockBtcNft -> ERC721URIStorage [ label="2" ];
MockBtcNft -> ERC721Enumerable [ label="3" ];
MockBtcNft -> Pausable [ label="4" ];
MockBtcNft -> AccessControl [ label="5" ];
MockBtcNft -> ERC721Burnable [ label="6" ];
MockBtcNft[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>MockBtcNft</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    pause()</TD></TR><TR><TD align="left">    unpause()</TD></TR><TR><TD align="left">    safeMint(address,string,address)</TD></TR><TR><TD align="left"><font color="#FFA500">    burn(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left">    getDLCNFTsByOwner(address)</TD></TR><TR><TD align="left"><font color="#FFA500">    tokenURI(uint256)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    _baseURI()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    _beforeTokenTransfer(address,address,uint256,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    _burn(uint256)</font></TD></TR><TR><TD align="left">    _setOriginalDepositor(uint256,address)</TD></TR><TR><TD align="left">    _setBroker(uint256,address)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    PAUSER_ROLE</TD></TR><TR><TD align="left">    MINTER_ROLE</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _tokenIdCounter</TD></TR><TR><TD align="left">    _originalDepositors</TD></TR><TR><TD align="left">    _brokers</TD></TR></TABLE> >];

MockDLCManager -> AccessControl;
MockDLCManager[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>MockDLCManager</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    getDLC(bytes32)</TD></TR><TR><TD align="left">    createDLC(uint256,uint256)</TD></TR><TR><TD align="left">    postCreateDLC(bytes32,uint256,uint256,address)</TD></TR><TR><TD align="left">    setStatusFunded(bytes32)</TD></TR><TR><TD align="left">    mintBtcNft(bytes32,uint256)</TD></TR><TR><TD align="left">    closeDLC(bytes32,uint256)</TD></TR><TR><TD align="left">    postCloseDLC(bytes32,uint256)</TD></TR><TR><TD align="left">    getBTCPriceWithCallback(bytes32)</TD></TR><TR><TD align="left">    getAllUUIDs()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _generateUUID(address,uint256)</TD></TR><TR><TD align="left">    _getLatestPrice(address)</TD></TR><TR><TD align="left">    _removeClosedDLC(uint256)</TD></TR><TR><TD align="left">    _findIndex(bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    DLC_ADMIN_ROLE</TD></TR><TR><TD align="left">    openUUIDs</TD></TR><TR><TD align="left">    btcPriceFeedAddress</TD></TR><TR><TD align="left">    dlcs</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _localNonce</TD></TR></TABLE> >];

MockV3Aggregator -> AggregatorV2V3Interface;
MockV3Aggregator[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>MockV3Aggregator</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    updateAnswer(int256)</TD></TR><TR><TD align="left">    updateRoundData(uint80,int256,uint256,uint256)</TD></TR><TR><TD align="left"><font color="#FFA500">    getRoundData(uint80)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    latestRoundData()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    description()</font></TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    version</TD></TR><TR><TD align="left">    decimals</TD></TR><TR><TD align="left">    latestAnswer</TD></TR><TR><TD align="left">    latestTimestamp</TD></TR><TR><TD align="left">    latestRound</TD></TR><TR><TD align="left">    getAnswer</TD></TR><TR><TD align="left">    getTimestamp</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _getStartedAt</TD></TR></TABLE> >];

console[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>console</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _sendLogPayload(bytes)</TD></TR><TR><TD align="left">    log()</TD></TR><TR><TD align="left">    logInt(int256)</TD></TR><TR><TD align="left">    logUint(uint256)</TD></TR><TR><TD align="left">    logString(string)</TD></TR><TR><TD align="left">    logBool(bool)</TD></TR><TR><TD align="left">    logAddress(address)</TD></TR><TR><TD align="left">    logBytes(bytes)</TD></TR><TR><TD align="left">    logBytes1(bytes1)</TD></TR><TR><TD align="left">    logBytes2(bytes2)</TD></TR><TR><TD align="left">    logBytes3(bytes3)</TD></TR><TR><TD align="left">    logBytes4(bytes4)</TD></TR><TR><TD align="left">    logBytes5(bytes5)</TD></TR><TR><TD align="left">    logBytes6(bytes6)</TD></TR><TR><TD align="left">    logBytes7(bytes7)</TD></TR><TR><TD align="left">    logBytes8(bytes8)</TD></TR><TR><TD align="left">    logBytes9(bytes9)</TD></TR><TR><TD align="left">    logBytes10(bytes10)</TD></TR><TR><TD align="left">    logBytes11(bytes11)</TD></TR><TR><TD align="left">    logBytes12(bytes12)</TD></TR><TR><TD align="left">    logBytes13(bytes13)</TD></TR><TR><TD align="left">    logBytes14(bytes14)</TD></TR><TR><TD align="left">    logBytes15(bytes15)</TD></TR><TR><TD align="left">    logBytes16(bytes16)</TD></TR><TR><TD align="left">    logBytes17(bytes17)</TD></TR><TR><TD align="left">    logBytes18(bytes18)</TD></TR><TR><TD align="left">    logBytes19(bytes19)</TD></TR><TR><TD align="left">    logBytes20(bytes20)</TD></TR><TR><TD align="left">    logBytes21(bytes21)</TD></TR><TR><TD align="left">    logBytes22(bytes22)</TD></TR><TR><TD align="left">    logBytes23(bytes23)</TD></TR><TR><TD align="left">    logBytes24(bytes24)</TD></TR><TR><TD align="left">    logBytes25(bytes25)</TD></TR><TR><TD align="left">    logBytes26(bytes26)</TD></TR><TR><TD align="left">    logBytes27(bytes27)</TD></TR><TR><TD align="left">    logBytes28(bytes28)</TD></TR><TR><TD align="left">    logBytes29(bytes29)</TD></TR><TR><TD align="left">    logBytes30(bytes30)</TD></TR><TR><TD align="left">    logBytes31(bytes31)</TD></TR><TR><TD align="left">    logBytes32(bytes32)</TD></TR><TR><TD align="left">    log(uint256)</TD></TR><TR><TD align="left">    log(string)</TD></TR><TR><TD align="left">    log(bool)</TD></TR><TR><TD align="left">    log(address)</TD></TR><TR><TD align="left">    log(uint256,uint256)</TD></TR><TR><TD align="left">    log(uint256,string)</TD></TR><TR><TD align="left">    log(uint256,bool)</TD></TR><TR><TD align="left">    log(uint256,address)</TD></TR><TR><TD align="left">    log(string,uint256)</TD></TR><TR><TD align="left">    log(string,string)</TD></TR><TR><TD align="left">    log(string,bool)</TD></TR><TR><TD align="left">    log(string,address)</TD></TR><TR><TD align="left">    log(bool,uint256)</TD></TR><TR><TD align="left">    log(bool,string)</TD></TR><TR><TD align="left">    log(bool,bool)</TD></TR><TR><TD align="left">    log(bool,address)</TD></TR><TR><TD align="left">    log(address,uint256)</TD></TR><TR><TD align="left">    log(address,string)</TD></TR><TR><TD align="left">    log(address,bool)</TD></TR><TR><TD align="left">    log(address,address)</TD></TR><TR><TD align="left">    log(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    log(uint256,uint256,string)</TD></TR><TR><TD align="left">    log(uint256,uint256,bool)</TD></TR><TR><TD align="left">    log(uint256,uint256,address)</TD></TR><TR><TD align="left">    log(uint256,string,uint256)</TD></TR><TR><TD align="left">    log(uint256,string,string)</TD></TR><TR><TD align="left">    log(uint256,string,bool)</TD></TR><TR><TD align="left">    log(uint256,string,address)</TD></TR><TR><TD align="left">    log(uint256,bool,uint256)</TD></TR><TR><TD align="left">    log(uint256,bool,string)</TD></TR><TR><TD align="left">    log(uint256,bool,bool)</TD></TR><TR><TD align="left">    log(uint256,bool,address)</TD></TR><TR><TD align="left">    log(uint256,address,uint256)</TD></TR><TR><TD align="left">    log(uint256,address,string)</TD></TR><TR><TD align="left">    log(uint256,address,bool)</TD></TR><TR><TD align="left">    log(uint256,address,address)</TD></TR><TR><TD align="left">    log(string,uint256,uint256)</TD></TR><TR><TD align="left">    log(string,uint256,string)</TD></TR><TR><TD align="left">    log(string,uint256,bool)</TD></TR><TR><TD align="left">    log(string,uint256,address)</TD></TR><TR><TD align="left">    log(string,string,uint256)</TD></TR><TR><TD align="left">    log(string,string,string)</TD></TR><TR><TD align="left">    log(string,string,bool)</TD></TR><TR><TD align="left">    log(string,string,address)</TD></TR><TR><TD align="left">    log(string,bool,uint256)</TD></TR><TR><TD align="left">    log(string,bool,string)</TD></TR><TR><TD align="left">    log(string,bool,bool)</TD></TR><TR><TD align="left">    log(string,bool,address)</TD></TR><TR><TD align="left">    log(string,address,uint256)</TD></TR><TR><TD align="left">    log(string,address,string)</TD></TR><TR><TD align="left">    log(string,address,bool)</TD></TR><TR><TD align="left">    log(string,address,address)</TD></TR><TR><TD align="left">    log(bool,uint256,uint256)</TD></TR><TR><TD align="left">    log(bool,uint256,string)</TD></TR><TR><TD align="left">    log(bool,uint256,bool)</TD></TR><TR><TD align="left">    log(bool,uint256,address)</TD></TR><TR><TD align="left">    log(bool,string,uint256)</TD></TR><TR><TD align="left">    log(bool,string,string)</TD></TR><TR><TD align="left">    log(bool,string,bool)</TD></TR><TR><TD align="left">    log(bool,string,address)</TD></TR><TR><TD align="left">    log(bool,bool,uint256)</TD></TR><TR><TD align="left">    log(bool,bool,string)</TD></TR><TR><TD align="left">    log(bool,bool,bool)</TD></TR><TR><TD align="left">    log(bool,bool,address)</TD></TR><TR><TD align="left">    log(bool,address,uint256)</TD></TR><TR><TD align="left">    log(bool,address,string)</TD></TR><TR><TD align="left">    log(bool,address,bool)</TD></TR><TR><TD align="left">    log(bool,address,address)</TD></TR><TR><TD align="left">    log(address,uint256,uint256)</TD></TR><TR><TD align="left">    log(address,uint256,string)</TD></TR><TR><TD align="left">    log(address,uint256,bool)</TD></TR><TR><TD align="left">    log(address,uint256,address)</TD></TR><TR><TD align="left">    log(address,string,uint256)</TD></TR><TR><TD align="left">    log(address,string,string)</TD></TR><TR><TD align="left">    log(address,string,bool)</TD></TR><TR><TD align="left">    log(address,string,address)</TD></TR><TR><TD align="left">    log(address,bool,uint256)</TD></TR><TR><TD align="left">    log(address,bool,string)</TD></TR><TR><TD align="left">    log(address,bool,bool)</TD></TR><TR><TD align="left">    log(address,bool,address)</TD></TR><TR><TD align="left">    log(address,address,uint256)</TD></TR><TR><TD align="left">    log(address,address,string)</TD></TR><TR><TD align="left">    log(address,address,bool)</TD></TR><TR><TD align="left">    log(address,address,address)</TD></TR><TR><TD align="left">    log(uint256,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    log(uint256,uint256,uint256,string)</TD></TR><TR><TD align="left">    log(uint256,uint256,uint256,bool)</TD></TR><TR><TD align="left">    log(uint256,uint256,uint256,address)</TD></TR><TR><TD align="left">    log(uint256,uint256,string,uint256)</TD></TR><TR><TD align="left">    log(uint256,uint256,string,string)</TD></TR><TR><TD align="left">    log(uint256,uint256,string,bool)</TD></TR><TR><TD align="left">    log(uint256,uint256,string,address)</TD></TR><TR><TD align="left">    log(uint256,uint256,bool,uint256)</TD></TR><TR><TD align="left">    log(uint256,uint256,bool,string)</TD></TR><TR><TD align="left">    log(uint256,uint256,bool,bool)</TD></TR><TR><TD align="left">    log(uint256,uint256,bool,address)</TD></TR><TR><TD align="left">    log(uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    log(uint256,uint256,address,string)</TD></TR><TR><TD align="left">    log(uint256,uint256,address,bool)</TD></TR><TR><TD align="left">    log(uint256,uint256,address,address)</TD></TR><TR><TD align="left">    log(uint256,string,uint256,uint256)</TD></TR><TR><TD align="left">    log(uint256,string,uint256,string)</TD></TR><TR><TD align="left">    log(uint256,string,uint256,bool)</TD></TR><TR><TD align="left">    log(uint256,string,uint256,address)</TD></TR><TR><TD align="left">    log(uint256,string,string,uint256)</TD></TR><TR><TD align="left">    log(uint256,string,string,string)</TD></TR><TR><TD align="left">    log(uint256,string,string,bool)</TD></TR><TR><TD align="left">    log(uint256,string,string,address)</TD></TR><TR><TD align="left">    log(uint256,string,bool,uint256)</TD></TR><TR><TD align="left">    log(uint256,string,bool,string)</TD></TR><TR><TD align="left">    log(uint256,string,bool,bool)</TD></TR><TR><TD align="left">    log(uint256,string,bool,address)</TD></TR><TR><TD align="left">    log(uint256,string,address,uint256)</TD></TR><TR><TD align="left">    log(uint256,string,address,string)</TD></TR><TR><TD align="left">    log(uint256,string,address,bool)</TD></TR><TR><TD align="left">    log(uint256,string,address,address)</TD></TR><TR><TD align="left">    log(uint256,bool,uint256,uint256)</TD></TR><TR><TD align="left">    log(uint256,bool,uint256,string)</TD></TR><TR><TD align="left">    log(uint256,bool,uint256,bool)</TD></TR><TR><TD align="left">    log(uint256,bool,uint256,address)</TD></TR><TR><TD align="left">    log(uint256,bool,string,uint256)</TD></TR><TR><TD align="left">    log(uint256,bool,string,string)</TD></TR><TR><TD align="left">    log(uint256,bool,string,bool)</TD></TR><TR><TD align="left">    log(uint256,bool,string,address)</TD></TR><TR><TD align="left">    log(uint256,bool,bool,uint256)</TD></TR><TR><TD align="left">    log(uint256,bool,bool,string)</TD></TR><TR><TD align="left">    log(uint256,bool,bool,bool)</TD></TR><TR><TD align="left">    log(uint256,bool,bool,address)</TD></TR><TR><TD align="left">    log(uint256,bool,address,uint256)</TD></TR><TR><TD align="left">    log(uint256,bool,address,string)</TD></TR><TR><TD align="left">    log(uint256,bool,address,bool)</TD></TR><TR><TD align="left">    log(uint256,bool,address,address)</TD></TR><TR><TD align="left">    log(uint256,address,uint256,uint256)</TD></TR><TR><TD align="left">    log(uint256,address,uint256,string)</TD></TR><TR><TD align="left">    log(uint256,address,uint256,bool)</TD></TR><TR><TD align="left">    log(uint256,address,uint256,address)</TD></TR><TR><TD align="left">    log(uint256,address,string,uint256)</TD></TR><TR><TD align="left">    log(uint256,address,string,string)</TD></TR><TR><TD align="left">    log(uint256,address,string,bool)</TD></TR><TR><TD align="left">    log(uint256,address,string,address)</TD></TR><TR><TD align="left">    log(uint256,address,bool,uint256)</TD></TR><TR><TD align="left">    log(uint256,address,bool,string)</TD></TR><TR><TD align="left">    log(uint256,address,bool,bool)</TD></TR><TR><TD align="left">    log(uint256,address,bool,address)</TD></TR><TR><TD align="left">    log(uint256,address,address,uint256)</TD></TR><TR><TD align="left">    log(uint256,address,address,string)</TD></TR><TR><TD align="left">    log(uint256,address,address,bool)</TD></TR><TR><TD align="left">    log(uint256,address,address,address)</TD></TR><TR><TD align="left">    log(string,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    log(string,uint256,uint256,string)</TD></TR><TR><TD align="left">    log(string,uint256,uint256,bool)</TD></TR><TR><TD align="left">    log(string,uint256,uint256,address)</TD></TR><TR><TD align="left">    log(string,uint256,string,uint256)</TD></TR><TR><TD align="left">    log(string,uint256,string,string)</TD></TR><TR><TD align="left">    log(string,uint256,string,bool)</TD></TR><TR><TD align="left">    log(string,uint256,string,address)</TD></TR><TR><TD align="left">    log(string,uint256,bool,uint256)</TD></TR><TR><TD align="left">    log(string,uint256,bool,string)</TD></TR><TR><TD align="left">    log(string,uint256,bool,bool)</TD></TR><TR><TD align="left">    log(string,uint256,bool,address)</TD></TR><TR><TD align="left">    log(string,uint256,address,uint256)</TD></TR><TR><TD align="left">    log(string,uint256,address,string)</TD></TR><TR><TD align="left">    log(string,uint256,address,bool)</TD></TR><TR><TD align="left">    log(string,uint256,address,address)</TD></TR><TR><TD align="left">    log(string,string,uint256,uint256)</TD></TR><TR><TD align="left">    log(string,string,uint256,string)</TD></TR><TR><TD align="left">    log(string,string,uint256,bool)</TD></TR><TR><TD align="left">    log(string,string,uint256,address)</TD></TR><TR><TD align="left">    log(string,string,string,uint256)</TD></TR><TR><TD align="left">    log(string,string,string,string)</TD></TR><TR><TD align="left">    log(string,string,string,bool)</TD></TR><TR><TD align="left">    log(string,string,string,address)</TD></TR><TR><TD align="left">    log(string,string,bool,uint256)</TD></TR><TR><TD align="left">    log(string,string,bool,string)</TD></TR><TR><TD align="left">    log(string,string,bool,bool)</TD></TR><TR><TD align="left">    log(string,string,bool,address)</TD></TR><TR><TD align="left">    log(string,string,address,uint256)</TD></TR><TR><TD align="left">    log(string,string,address,string)</TD></TR><TR><TD align="left">    log(string,string,address,bool)</TD></TR><TR><TD align="left">    log(string,string,address,address)</TD></TR><TR><TD align="left">    log(string,bool,uint256,uint256)</TD></TR><TR><TD align="left">    log(string,bool,uint256,string)</TD></TR><TR><TD align="left">    log(string,bool,uint256,bool)</TD></TR><TR><TD align="left">    log(string,bool,uint256,address)</TD></TR><TR><TD align="left">    log(string,bool,string,uint256)</TD></TR><TR><TD align="left">    log(string,bool,string,string)</TD></TR><TR><TD align="left">    log(string,bool,string,bool)</TD></TR><TR><TD align="left">    log(string,bool,string,address)</TD></TR><TR><TD align="left">    log(string,bool,bool,uint256)</TD></TR><TR><TD align="left">    log(string,bool,bool,string)</TD></TR><TR><TD align="left">    log(string,bool,bool,bool)</TD></TR><TR><TD align="left">    log(string,bool,bool,address)</TD></TR><TR><TD align="left">    log(string,bool,address,uint256)</TD></TR><TR><TD align="left">    log(string,bool,address,string)</TD></TR><TR><TD align="left">    log(string,bool,address,bool)</TD></TR><TR><TD align="left">    log(string,bool,address,address)</TD></TR><TR><TD align="left">    log(string,address,uint256,uint256)</TD></TR><TR><TD align="left">    log(string,address,uint256,string)</TD></TR><TR><TD align="left">    log(string,address,uint256,bool)</TD></TR><TR><TD align="left">    log(string,address,uint256,address)</TD></TR><TR><TD align="left">    log(string,address,string,uint256)</TD></TR><TR><TD align="left">    log(string,address,string,string)</TD></TR><TR><TD align="left">    log(string,address,string,bool)</TD></TR><TR><TD align="left">    log(string,address,string,address)</TD></TR><TR><TD align="left">    log(string,address,bool,uint256)</TD></TR><TR><TD align="left">    log(string,address,bool,string)</TD></TR><TR><TD align="left">    log(string,address,bool,bool)</TD></TR><TR><TD align="left">    log(string,address,bool,address)</TD></TR><TR><TD align="left">    log(string,address,address,uint256)</TD></TR><TR><TD align="left">    log(string,address,address,string)</TD></TR><TR><TD align="left">    log(string,address,address,bool)</TD></TR><TR><TD align="left">    log(string,address,address,address)</TD></TR><TR><TD align="left">    log(bool,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    log(bool,uint256,uint256,string)</TD></TR><TR><TD align="left">    log(bool,uint256,uint256,bool)</TD></TR><TR><TD align="left">    log(bool,uint256,uint256,address)</TD></TR><TR><TD align="left">    log(bool,uint256,string,uint256)</TD></TR><TR><TD align="left">    log(bool,uint256,string,string)</TD></TR><TR><TD align="left">    log(bool,uint256,string,bool)</TD></TR><TR><TD align="left">    log(bool,uint256,string,address)</TD></TR><TR><TD align="left">    log(bool,uint256,bool,uint256)</TD></TR><TR><TD align="left">    log(bool,uint256,bool,string)</TD></TR><TR><TD align="left">    log(bool,uint256,bool,bool)</TD></TR><TR><TD align="left">    log(bool,uint256,bool,address)</TD></TR><TR><TD align="left">    log(bool,uint256,address,uint256)</TD></TR><TR><TD align="left">    log(bool,uint256,address,string)</TD></TR><TR><TD align="left">    log(bool,uint256,address,bool)</TD></TR><TR><TD align="left">    log(bool,uint256,address,address)</TD></TR><TR><TD align="left">    log(bool,string,uint256,uint256)</TD></TR><TR><TD align="left">    log(bool,string,uint256,string)</TD></TR><TR><TD align="left">    log(bool,string,uint256,bool)</TD></TR><TR><TD align="left">    log(bool,string,uint256,address)</TD></TR><TR><TD align="left">    log(bool,string,string,uint256)</TD></TR><TR><TD align="left">    log(bool,string,string,string)</TD></TR><TR><TD align="left">    log(bool,string,string,bool)</TD></TR><TR><TD align="left">    log(bool,string,string,address)</TD></TR><TR><TD align="left">    log(bool,string,bool,uint256)</TD></TR><TR><TD align="left">    log(bool,string,bool,string)</TD></TR><TR><TD align="left">    log(bool,string,bool,bool)</TD></TR><TR><TD align="left">    log(bool,string,bool,address)</TD></TR><TR><TD align="left">    log(bool,string,address,uint256)</TD></TR><TR><TD align="left">    log(bool,string,address,string)</TD></TR><TR><TD align="left">    log(bool,string,address,bool)</TD></TR><TR><TD align="left">    log(bool,string,address,address)</TD></TR><TR><TD align="left">    log(bool,bool,uint256,uint256)</TD></TR><TR><TD align="left">    log(bool,bool,uint256,string)</TD></TR><TR><TD align="left">    log(bool,bool,uint256,bool)</TD></TR><TR><TD align="left">    log(bool,bool,uint256,address)</TD></TR><TR><TD align="left">    log(bool,bool,string,uint256)</TD></TR><TR><TD align="left">    log(bool,bool,string,string)</TD></TR><TR><TD align="left">    log(bool,bool,string,bool)</TD></TR><TR><TD align="left">    log(bool,bool,string,address)</TD></TR><TR><TD align="left">    log(bool,bool,bool,uint256)</TD></TR><TR><TD align="left">    log(bool,bool,bool,string)</TD></TR><TR><TD align="left">    log(bool,bool,bool,bool)</TD></TR><TR><TD align="left">    log(bool,bool,bool,address)</TD></TR><TR><TD align="left">    log(bool,bool,address,uint256)</TD></TR><TR><TD align="left">    log(bool,bool,address,string)</TD></TR><TR><TD align="left">    log(bool,bool,address,bool)</TD></TR><TR><TD align="left">    log(bool,bool,address,address)</TD></TR><TR><TD align="left">    log(bool,address,uint256,uint256)</TD></TR><TR><TD align="left">    log(bool,address,uint256,string)</TD></TR><TR><TD align="left">    log(bool,address,uint256,bool)</TD></TR><TR><TD align="left">    log(bool,address,uint256,address)</TD></TR><TR><TD align="left">    log(bool,address,string,uint256)</TD></TR><TR><TD align="left">    log(bool,address,string,string)</TD></TR><TR><TD align="left">    log(bool,address,string,bool)</TD></TR><TR><TD align="left">    log(bool,address,string,address)</TD></TR><TR><TD align="left">    log(bool,address,bool,uint256)</TD></TR><TR><TD align="left">    log(bool,address,bool,string)</TD></TR><TR><TD align="left">    log(bool,address,bool,bool)</TD></TR><TR><TD align="left">    log(bool,address,bool,address)</TD></TR><TR><TD align="left">    log(bool,address,address,uint256)</TD></TR><TR><TD align="left">    log(bool,address,address,string)</TD></TR><TR><TD align="left">    log(bool,address,address,bool)</TD></TR><TR><TD align="left">    log(bool,address,address,address)</TD></TR><TR><TD align="left">    log(address,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    log(address,uint256,uint256,string)</TD></TR><TR><TD align="left">    log(address,uint256,uint256,bool)</TD></TR><TR><TD align="left">    log(address,uint256,uint256,address)</TD></TR><TR><TD align="left">    log(address,uint256,string,uint256)</TD></TR><TR><TD align="left">    log(address,uint256,string,string)</TD></TR><TR><TD align="left">    log(address,uint256,string,bool)</TD></TR><TR><TD align="left">    log(address,uint256,string,address)</TD></TR><TR><TD align="left">    log(address,uint256,bool,uint256)</TD></TR><TR><TD align="left">    log(address,uint256,bool,string)</TD></TR><TR><TD align="left">    log(address,uint256,bool,bool)</TD></TR><TR><TD align="left">    log(address,uint256,bool,address)</TD></TR><TR><TD align="left">    log(address,uint256,address,uint256)</TD></TR><TR><TD align="left">    log(address,uint256,address,string)</TD></TR><TR><TD align="left">    log(address,uint256,address,bool)</TD></TR><TR><TD align="left">    log(address,uint256,address,address)</TD></TR><TR><TD align="left">    log(address,string,uint256,uint256)</TD></TR><TR><TD align="left">    log(address,string,uint256,string)</TD></TR><TR><TD align="left">    log(address,string,uint256,bool)</TD></TR><TR><TD align="left">    log(address,string,uint256,address)</TD></TR><TR><TD align="left">    log(address,string,string,uint256)</TD></TR><TR><TD align="left">    log(address,string,string,string)</TD></TR><TR><TD align="left">    log(address,string,string,bool)</TD></TR><TR><TD align="left">    log(address,string,string,address)</TD></TR><TR><TD align="left">    log(address,string,bool,uint256)</TD></TR><TR><TD align="left">    log(address,string,bool,string)</TD></TR><TR><TD align="left">    log(address,string,bool,bool)</TD></TR><TR><TD align="left">    log(address,string,bool,address)</TD></TR><TR><TD align="left">    log(address,string,address,uint256)</TD></TR><TR><TD align="left">    log(address,string,address,string)</TD></TR><TR><TD align="left">    log(address,string,address,bool)</TD></TR><TR><TD align="left">    log(address,string,address,address)</TD></TR><TR><TD align="left">    log(address,bool,uint256,uint256)</TD></TR><TR><TD align="left">    log(address,bool,uint256,string)</TD></TR><TR><TD align="left">    log(address,bool,uint256,bool)</TD></TR><TR><TD align="left">    log(address,bool,uint256,address)</TD></TR><TR><TD align="left">    log(address,bool,string,uint256)</TD></TR><TR><TD align="left">    log(address,bool,string,string)</TD></TR><TR><TD align="left">    log(address,bool,string,bool)</TD></TR><TR><TD align="left">    log(address,bool,string,address)</TD></TR><TR><TD align="left">    log(address,bool,bool,uint256)</TD></TR><TR><TD align="left">    log(address,bool,bool,string)</TD></TR><TR><TD align="left">    log(address,bool,bool,bool)</TD></TR><TR><TD align="left">    log(address,bool,bool,address)</TD></TR><TR><TD align="left">    log(address,bool,address,uint256)</TD></TR><TR><TD align="left">    log(address,bool,address,string)</TD></TR><TR><TD align="left">    log(address,bool,address,bool)</TD></TR><TR><TD align="left">    log(address,bool,address,address)</TD></TR><TR><TD align="left">    log(address,address,uint256,uint256)</TD></TR><TR><TD align="left">    log(address,address,uint256,string)</TD></TR><TR><TD align="left">    log(address,address,uint256,bool)</TD></TR><TR><TD align="left">    log(address,address,uint256,address)</TD></TR><TR><TD align="left">    log(address,address,string,uint256)</TD></TR><TR><TD align="left">    log(address,address,string,string)</TD></TR><TR><TD align="left">    log(address,address,string,bool)</TD></TR><TR><TD align="left">    log(address,address,string,address)</TD></TR><TR><TD align="left">    log(address,address,bool,uint256)</TD></TR><TR><TD align="left">    log(address,address,bool,string)</TD></TR><TR><TD align="left">    log(address,address,bool,bool)</TD></TR><TR><TD align="left">    log(address,address,bool,address)</TD></TR><TR><TD align="left">    log(address,address,address,uint256)</TD></TR><TR><TD align="left">    log(address,address,address,string)</TD></TR><TR><TD align="left">    log(address,address,address,bool)</TD></TR><TR><TD align="left">    log(address,address,address,address)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    CONSOLE_ADDRESS</TD></TR></TABLE> >];

}